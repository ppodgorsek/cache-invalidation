@startuml

participant "InvalidationManager"
participant "InvalidationProcessor 1" #lightgreen
participant "InvalidationCollector 1" #lightgreen
participant "InvalidationInterceptor"
participant "InvalidationProcessor 2" #lightblue
participant "InvalidationCollector 2" #lightblue

InvalidationManager -> "InvalidationProcessor 1": invalidateEntries()
activate "InvalidationProcessor 1"

"InvalidationProcessor 1" -> "InvalidationInterceptor": preHandle()
activate "InvalidationInterceptor"
"InvalidationInterceptor" --> "InvalidationProcessor 1"
deactivate "InvalidationInterceptor"

"InvalidationProcessor 1" -> "InvalidationCollector 1": getEntries()
activate "InvalidationCollector 1"
"InvalidationCollector 1" --> "InvalidationProcessor 1"
deactivate "InvalidationCollector 1"

loop entry: entries
	"InvalidationProcessor 1" -> "InvalidationProcessor 1": invalidateEntry(InvalidationEntry entry)

	"InvalidationProcessor 1" -> "InvalidationCollector 2": addInvalidationEntry(InvalidationEntry entry)
	activate "InvalidationCollector 2"
	"InvalidationCollector 2" --> "InvalidationProcessor 1"
	deactivate "InvalidationCollector 2"

	"InvalidationProcessor 1" -> "InvalidationCollector 1": consumeEntry(InvalidationEntry entry)
	activate "InvalidationCollector 1"
	"InvalidationCollector 1" --> "InvalidationProcessor 1"
	deactivate "InvalidationCollector 1"
end

"InvalidationProcessor 1" -> "InvalidationInterceptor": postHandle()
activate "InvalidationInterceptor"
"InvalidationInterceptor" --> "InvalidationProcessor 1"
deactivate "InvalidationInterceptor"

"InvalidationProcessor 1" -> "InvalidationProcessor 2": invalidateEntries()
note over "InvalidationProcessor 2": The same logic is performed by\nthe next processor in the chain
"InvalidationProcessor 2" --> "InvalidationProcessor 1"

"InvalidationProcessor 1" --> InvalidationManager
deactivate "InvalidationProcessor 1"

@enduml